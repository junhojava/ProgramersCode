package code.programers.level.two;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

public class ExpressionTest {
    /**
     * 연산 수식의 구성 : 숫자 + 연산문자
     * 연산문자는 +, -, *로 구성
     * 연산자의 우선순위를 자유롭게 재 정의하여 가장 큰 숫자를 제출
     * 
     * 연산자의 우선순위를 새로 정의할 때, 같은 순위의 연산자는 없어야 한다.
     * "+" > "-" > "*" 와 같이는 가능하다.
     * "+", "-" > "*"는 불가능 하다.
     * 
     * 만약 계산된 결과가 음수라면 절대값으로 변환하여 제출
     * 연산자가 3면 6개의 조합, 2개라면 2개의 조합이 가능하다.
     * 
     * ※ ex) 100-200*300-500+20
     * 
     * 1) +>->* 일 경우
     * 100-200*300-(500+20) = (100-200)*(300-520) = -100*-220 = -22000
     * 2) +>*>- 일 경우
     * 100-200*300(-500+20) = 100-(200*300)-480 = (100-60000)-480 = -59000-480 = -60380 = 60380
     * 3) ->*>+ 일 경우
     * (100-200)*(300-500)+20 = (-100*-200)+20 = 20000+20 = 20020
     * 4) ->+>* 일 경우
     * (100-200)*(300-500)+20 = -100*(-220+20)= -100*-200 = 20000
     * 5) *>+>- 일 경우
     * 100-(200*300)-500+20 = 100-60000-(500+20)= 100-60000-520 = -59900-520 = -60420 = 60420
     * 6) *>->+ 일 경우
     * 100-(200*300)-500+20 = (100-60000)-500+20 = (-59000-500)+20 = -60400 + 20 = -60380 = 60380
     */

    Expression exp = new Expression();

    @Test
    void testCountOperate()
    {
        exp.count = 0;
        assertEquals(3, exp.countOperate("+-*"));
    }
}